<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/03/10/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/"/>
      <url>/2022/03/10/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>title: 单链表的基本运用<br>date: 2022-03-10 16:27:16<br>tags:JAVA</p><h1 id="认识单链表"><a href="#认识单链表" class="headerlink" title="认识单链表"></a>认识单链表</h1><p>单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。<br>链表中的数据是以节点来表示的，每个节点的构成：data域（数据元素）+next域（下一个结点的存储位置）。<br>单链表与数组相比的最大差别是：单链表的数据元素存放在内存空间的地址是不连续的，<br>而数组的数据元素存放的地址在内存空间中是连续的，<br>这也是为什么根据索引无法像数组那样直接就能查询到数据元素。</p><h2 id="基本操作如下"><a href="#基本操作如下" class="headerlink" title="基本操作如下"></a>基本操作如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">public class LinkList &#123;</span><br><span class="line">    private static final LinkNode NULL = null;</span><br><span class="line">private LinkNode Head = new LinkNode();</span><br><span class="line">//先初始化一个头结点，头结点为空</span><br><span class="line">    LinkList() &#123;</span><br><span class="line">        Init_LinkNode();</span><br><span class="line">&#125;</span><br><span class="line">//内部类节点LinkNode</span><br><span class="line">    class LinkNode &#123;</span><br><span class="line"></span><br><span class="line">    int data;</span><br><span class="line"></span><br><span class="line">    LinkNode next=null;</span><br><span class="line"></span><br><span class="line">    LinkNode()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkNode(int elem)&#123;</span><br><span class="line"></span><br><span class="line">        data=elem;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkNode(int elem,LinkNode nextval)&#123;</span><br><span class="line"></span><br><span class="line">        data=elem;</span><br><span class="line"></span><br><span class="line">        next=nextval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkNode(LinkNode nextval)&#123;</span><br><span class="line"></span><br><span class="line">        next=nextval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    //1.单链表的初始化</span><br><span class="line">    public void Init_LinkNode() &#123;</span><br><span class="line">        LinkNode head = null;</span><br><span class="line">    &#125;</span><br><span class="line">//2.判断表是否为空</span><br><span class="line"> public boolean isEmpty() &#123;</span><br><span class="line">//通过判断头结点的下一结点地址是否为空，即可判断单链表是否为空</span><br><span class="line">    if(this.Head.next == null) &#123;  </span><br><span class="line">     return true; </span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //3.返回单链表的长度</span><br><span class="line">    public int Length_LinkList() &#123;</span><br><span class="line">        int j=0;</span><br><span class="line">        LinkNode tmp=Head; </span><br><span class="line">//head节点不能动，需要一个tmp辅助遍历</span><br><span class="line">        while(tmp != null) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            tmp=tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        //4.返回第i个元素</span><br><span class="line">        public LinkNode Get_LinkList(int i) &#123;</span><br><span class="line">            LinkNode p = Head;</span><br><span class="line">            int a = 0;</span><br><span class="line">            while (p.next != null &amp;&amp; a &lt; i) &#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (a == i) &#123;</span><br><span class="line">                return p;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">//5.删除第i个元素</span><br><span class="line">        public int Delete_LinkList(int i) &#123;</span><br><span class="line">                LinkNode p;</span><br><span class="line">                LinkNode s;</span><br><span class="line">            p=Get_LinkList(i-1);</span><br><span class="line">            if(p==null)&#123;</span><br><span class="line">                System.out.println(&quot;第i-1个结点不存在&quot;);</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;else if (p.next==null)&#123;</span><br><span class="line">                System.out.println(&quot;第i个结点不存在&quot;);</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                s=p.next;</span><br><span class="line">                p.next=s.next;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> //6.在第i个位置插入元素</span><br><span class="line">        public int  Insert_LinkList(int i,int x) &#123;</span><br><span class="line">        LinkNode p,s;</span><br><span class="line">        p=Get_LinkList(i-1);</span><br><span class="line">            if(p==null)&#123;</span><br><span class="line">                System.out.println(&quot;参数i错误&quot;);</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                s=new LinkNode();</span><br><span class="line">                s.data=x;</span><br><span class="line">                s.next=p.next;</span><br><span class="line">                p.next=s;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        //7.把表中的元素打印出来</span><br><span class="line">            public void display()&#123;</span><br><span class="line">                LinkNode tmp=Head;</span><br><span class="line">                while (tmp!=null) &#123;</span><br><span class="line">                    System.out.println(tmp.data+&quot;  &quot;);</span><br><span class="line">                    tmp=tmp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="顺序表与单链表的比较"><a href="#顺序表与单链表的比较" class="headerlink" title="顺序表与单链表的比较"></a>顺序表与单链表的比较</h1><h2 id="顺序表的优点："><a href="#顺序表的优点：" class="headerlink" title="顺序表的优点："></a>顺序表的优点：</h2><p>其存储结构为随机存取结构，逻辑关系可直接用数组元素下标表示。</p><h2 id="顺序表的缺点："><a href="#顺序表的缺点：" class="headerlink" title="顺序表的缺点："></a>顺序表的缺点：</h2><p>①线性表的长度不确定，难以事先确定数组长度。<br>②存储空间必须是连续的，易造成存储空间的“碎片”现象。③插入和删除操作需要移动大量元素。</p><h2 id="单链表的优点："><a href="#单链表的优点：" class="headerlink" title="单链表的优点："></a>单链表的优点：</h2><p>①元素的存储单元是任意的，可连续也可不连续。②不需要限定长度。</p><h2 id="单链表的缺点"><a href="#单链表的缺点" class="headerlink" title="单链表的缺点"></a>单链表的缺点</h2><p>：①其查找时间复杂度为O(n)。②存放元素时需要另外开辟一个指针域的空间。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/09/%E8%AE%A4%E8%AF%86%E6%95%B0%E7%BB%84/"/>
      <url>/2022/03/09/%E8%AE%A4%E8%AF%86%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>title: 认识数组<br>date: 2022-03-09 20:33:18<br>tags:JAVA</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-1认识数组"><a href="#1-1认识数组" class="headerlink" title="1.1认识数组"></a>1.1认识数组</h2><p>数组Array，标志是[ ] ,用于储存多个相同类型数据的集合<br>想要获取数组中的元素值，可以通过脚标（下标）来获取<br>数组下标是从0开始的,下标的最大值是数组的长度减1</p><h2 id="1-2-创建数组"><a href="#1-2-创建数组" class="headerlink" title="1.2 创建数组"></a>1.2 创建数组</h2><p>数组的创建方式一般分为动态初始化和静态初始化</p><p>动态初始化<br>int[] a &#x3D; new int[5];<br>静态初始化<br>int[] b &#x3D; new int[]{1,2,3,4,5};<br>int[] c &#x3D; {1,2,3,4,5};</p><h2 id="1-3-创建数组过程分析"><a href="#1-3-创建数组过程分析" class="headerlink" title="1.3 创建数组过程分析"></a>1.3 创建数组过程分析</h2><p>程序创建数组 int[] a &#x3D; new int[5]; 时发生了什么?</p><p>1.在内存中开辟连续的空间,用来存放数据,长度是5<br>2.给数组完成初始化过程,给每个元素赋予默认值,int类型默认值是0<br>3.数组完成初始化会分配一个唯一的地址值<br>4.把唯一的地址值交给引用类型的变量a去保存</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
